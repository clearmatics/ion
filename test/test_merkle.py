## Copyright (c) 2016-2018 Clearmatics Technologies Ltd
## SPDX-License-Identifier: LGPL-3.0+

#!/usr/bin/env python
"""
Test Merkle:
Tests the functionality of the merkle.py
"""
import unittest

from ion.merkle import merkle_tree, merkle_path, merkle_proof

EXPECTED_TREE = [
        [
            8568612641526826488487436752726739043287191320122540356069953783894380777505,
            8763638472773768691201326883407021568462294246273894496415427229083082408032,
            19224855404247632006917173431419498680506051063941070371722880450128577361118,
            61795459977501490647348212754130855970016313872340374962921336716751708851142,
            64645341593328157176709656265449880868558868673380425455960412802858937540801,
            74330811247603495249613868516695563873247293176611122272199330092769797099053,
            78469846343542442363028680824980501212021332975324075417961003849793346933925,
            75317570447191171753008806478868650352148013528306361601609880810432714200529
        ],
        [
            6560824545851281876686151142367952893930617484325436481370811303698242675212,
            14094329272021934754728783365468382816047630355461653340632553426278198853241,
            25919299780512511508061958642305261009583198324725036212440752482930702519878,
            11791415309425995046749154607832041856871129882141188736462372751874115368248
        ],
        [
            22114525030336665972036957912787127870644756898138077124815002206627656645846,
            74561778027252859083209130121920474961655350982938755244738788717578708084930
        ],
        [
            5587813875922595628752214729735723034111050560116231646359963981668986135460
        ]
    ]

EXPECTED_ROOT = 5587813875922595628752214729735723034111050560116231646359963981668986135460

EXPECTED_PATHS = [
        [
            19224855404247632006917173431419498680506051063941070371722880450128577361118,
            6560824545851281876686151142367952893930617484325436481370811303698242675212,
            103509800336581907939101876374092451924972847149348896254603184719556990494914
        ],
        [
            104265592756520220608901552731040627315465509694716502611474276812410996610513,
            25919299780512511508061958642305261009583198324725036212440752482930702519878,
            22114525030336665972036957912787127870644756898138077124815002206627656645846
        ],
        [
            90743482286830539503240959006302832933333810038750515972785732718729991261126,
            6560824545851281876686151142367952893930617484325436481370811303698242675212,
            103509800336581907939101876374092451924972847149348896254603184719556990494914
        ],
        [
            8568612641526826488487436752726739043287191320122540356069953783894380777505,
            43042351581350983610621529617640359779365126521871794350496949428256481263225,
            103509800336581907939101876374092451924972847149348896254603184719556990494914
        ],
        [
            103278833556932544105506614768867540836564789343021263282063726094748079509037,
            40739437618755043902641900860004018820188626048551329746326768753852397778232,
            22114525030336665972036957912787127870644756898138077124815002206627656645846
        ],
        [
            64645341593328157176709656265449880868558868673380425455960412802858937540801,
            40739437618755043902641900860004018820188626048551329746326768753852397778232,
            22114525030336665972036957912787127870644756898138077124815002206627656645846
        ],
        [
            37711660782102817547094073135578998531779790412684035506279823231061364818016,
            43042351581350983610621529617640359779365126521871794350496949428256481263225,
            103509800336581907939101876374092451924972847149348896254603184719556990494914
        ]
    ]

TEST_DATA = ["1","2","3","4","5","6","7"]

class MerkleTest(unittest.TestCase):
    """
    Test Merkle Class
    """

    def test_merkle_tree(self):
        """
        Test merkle tree generation
        """
        print("\nTest: Merkle tree generation")
        tree, root = merkle_tree(TEST_DATA)
        self.assertTrue(tree == EXPECTED_TREE)
        self.assertTrue(root == EXPECTED_ROOT)
        print("Test: Merkle tree generation success")

    def test_merkle_paths(self):
        """
        Test item path generation
        """
        print("\nTest: Merkle path generation")
        for index, leaf in enumerate(TEST_DATA):
            path = merkle_path(leaf, EXPECTED_TREE)
            self.assertTrue(path == EXPECTED_PATHS[index])

        print("Test: Merkle path generation success")

    def test_merkle_proof(self):
        """
        Test item paths generated are valid
        """
        print("\nTest: Merkle proof generation")
        for index, leaf in enumerate(TEST_DATA):
            path = merkle_path(leaf, EXPECTED_TREE)

            valid = merkle_proof(leaf, path, EXPECTED_ROOT)
            self.assertTrue(valid == True)

        print("Test: Merkle proof generation success")

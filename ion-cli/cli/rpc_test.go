// Copyright (c) 2018 Clearmatics Technologies Ltd
package cli

import (
	"encoding/hex"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"testing"

	"github.com/clearmatics/autonity/core/types"
	"github.com/stretchr/testify/assert"
)

func Test_EncodeSignedBlock(t *testing.T) {
	TestSigned := "f9025ca03471555ab9a99528f02f9cdd8f0017fe2f56e01116acc4fe7f78aee900442f35a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347940000000000000000000000000000000000000000a0f526f481ffb6c3c56956d596f2b23e1f7ff17c810ba59efb579d9334a1765444a007f36c7ad26564fa65daebda75a23dfa95d660199092510743f6c8527dd72586a0907121bec78b40e8256fac47867d955c560b321e93fc9f046f919ffb5e3823ffbc8e837295a1832bffa2845b4f6b1db861d68301080d846765746886676f312e3130856c696e7578000000000000000000583a78dd245604e57368cb2688e42816ebc86eff73ee219dd96b8a56ea6392f75507e703203bc2cc624ce6820987cf9e8324dd1f9f67575502fe6060d723d0e100a00000000000000000000000000000000000000000000000000000000000000000880000000000000000"
	ExpectedSignedBytes, _ := hex.DecodeString(TestSigned)

	// read a fake block
	raw, err := ioutil.ReadFile("./block.json")
	if err != nil {
		fmt.Println("cannot find test block.json file:", err)
		return
	}

	// Marshall fake block into the Header
	var blockHeader *types.Header
	json.Unmarshal(raw, &blockHeader)
	SignedBlock := encodeSignedBlock(blockHeader)

	assert.Equal(t, ExpectedSignedBytes, SignedBlock)
}

func Test_EncodeUnsignedBlock(t *testing.T) {
	TestUnsigned := "f9021aa03471555ab9a99528f02f9cdd8f0017fe2f56e01116acc4fe7f78aee900442f35a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347940000000000000000000000000000000000000000a0f526f481ffb6c3c56956d596f2b23e1f7ff17c810ba59efb579d9334a1765444a007f36c7ad26564fa65daebda75a23dfa95d660199092510743f6c8527dd72586a0907121bec78b40e8256fac47867d955c560b321e93fc9f046f919ffb5e3823ffbc8e837295a1832bffa2845b4f6b1da0d68301080d846765746886676f312e3130856c696e7578000000000000000000a00000000000000000000000000000000000000000000000000000000000000000880000000000000000"
	ExpectedUnsignedBytes, _ := hex.DecodeString(TestUnsigned)

	// read a fake block
	raw, err := ioutil.ReadFile("./block.json")
	if err != nil {
		fmt.Println("cannot find test block.json file:", err)
		return
	}

	// Marshall fake block into the Header
	var blockHeader *types.Header
	json.Unmarshal(raw, &blockHeader)
	UnsignedBlock := encodeUnsignedBlock(blockHeader)

	assert.Equal(t, ExpectedUnsignedBytes, UnsignedBlock)

}
func Test_RlpEncodingIBFT(t *testing.T) {
	testBlock := `{"difficulty": "0x1","extraData": "0xdc83010000886175746f6e69747988676f312e31302e34856c696e7578000000f90164f854944335d75841d8b85187cf651ed130774143927c799461d7d88dbc76259fcf1f26bc0b5763aebd67aead94955425273ef777d6430d910f9a8b10adbe95fff694f00d3c728929e42000c8d92d1a7e6a666f12e6edb8410c11022a97fcb2248a2d757a845b4804755702125f8b7ec6c06503ae0277ad996dc22f81431e8036b6cf9ef7d3c1ff1b65a255c9cb70dd2f4925951503a6fdbf01f8c9b8412d3849c86c8ba3ed9a79cdd71b1684364c4c4efb1f01e83ca8cf663f3c95f7ac64b711cd297527d42fb3111b8f78d5227182f38ccc442be5ac4dcb52efede89a01b84135de3661d0191247c7f835c8eb6d7939052c0da8ae234baf8bd208c00225e706112df9bad5bf773120ba4bbc55f6d18e478de43712c0cd3de7a3e2bfd65abb7c01b841735f482a051e6ad7fb76a815907e68d903b73eff4e472006e56fdeca8155cb575f4c1d3e98cf3a4b013331c1bd171d0d500243ac0e073a5fd382294c4fe996f000","gasLimit": "0x4A6CE7","gasUsed": "0x0","hash": "0xed607d816f792bff503fc01bf8903b50aae5bbc6d00293350e38bba92cde40ab","logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","miner": "0x955425273ef777d6430d910f9a8b10adbe95fff6","mixHash": "0x63746963616c2062797a616e74696e65206661756c7420746f6c6572616e6365","nonce": "0x0000000000000000","number": "0x26","parentHash": "0x6893c6fe9270461992e748db2f30aa1359babbd74d0392eb4c3476ef942eb5ec","receiptsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421","sha3Uncles": "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347","size": 901,"stateRoot": "0x4e64a3b5ab9c561f72836209e376d035a0aa23a1fc7251e5d21c3c8437fef58e","timestamp": "0x5C61902F","totalDifficulty": "0x27","transactions": [],"transactionsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421","uncles": []}`

	expectedProposal := "f9026fa06893c6fe9270461992e748db2f30aa1359babbd74d0392eb4c3476ef942eb5eca01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d4934794955425273ef777d6430d910f9a8b10adbe95fff6a04e64a3b5ab9c561f72836209e376d035a0aa23a1fc7251e5d21c3c8437fef58ea056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421ba6ce780845c61902fb87adc83010000886175746f6e69747988676f312e31302e34856c696e7578000000f858f854944335d75841d8b85187cf651ed130774143927c799461d7d88dbc76259fcf1f26bc0b5763aebd67aead94955425273ef777d6430d910f9a8b10adbe95fff694f00d3c728929e42000c8d92d1a7e6a666f12e6ed80c0a063746963616c2062797a616e74696e65206661756c7420746f6c6572616e6365880000000000000000"

	expectedCommit := "f902b1a06893c6fe9270461992e748db2f30aa1359babbd74d0392eb4c3476ef942eb5eca01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d4934794955425273ef777d6430d910f9a8b10adbe95fff6a04e64a3b5ab9c561f72836209e376d035a0aa23a1fc7251e5d21c3c8437fef58ea056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421ba6ce780845c61902fb8bcdc83010000886175746f6e69747988676f312e31302e34856c696e7578000000f89af854944335d75841d8b85187cf651ed130774143927c799461d7d88dbc76259fcf1f26bc0b5763aebd67aead94955425273ef777d6430d910f9a8b10adbe95fff694f00d3c728929e42000c8d92d1a7e6a666f12e6edb8410c11022a97fcb2248a2d757a845b4804755702125f8b7ec6c06503ae0277ad996dc22f81431e8036b6cf9ef7d3c1ff1b65a255c9cb70dd2f4925951503a6fdbf01c0a063746963616c2062797a616e74696e65206661756c7420746f6c6572616e6365880000000000000000"

	expectedSeals := `f8c9b8412d3849c86c8ba3ed9a79cdd71b1684364c4c4efb1f01e83ca8cf663f3c95f7ac64b711cd297527d42fb3111b8f78d5227182f38ccc442be5ac4dcb52efede89a01b84135de3661d0191247c7f835c8eb6d7939052c0da8ae234baf8bd208c00225e706112df9bad5bf773120ba4bbc55f6d18e478de43712c0cd3de7a3e2bfd65abb7c01b841735f482a051e6ad7fb76a815907e68d903b73eff4e472006e56fdeca8155cb575f4c1d3e98cf3a4b013331c1bd171d0d500243ac0e073a5fd382294c4fe996f000`

	// Marshall fake block into the Header
	var block *types.Header
	err := json.Unmarshal([]byte(testBlock), &block)
	if err != nil {
		fmt.Println(err)
	}

	// get the proposal and commit blocks and the commit seal array
	proposal, commit, seals := RlpEncodeIBFT(block)

	assert.Equal(t, expectedProposal, hex.EncodeToString(proposal))
	assert.Equal(t, expectedCommit, hex.EncodeToString(commit))
	assert.Equal(t, expectedSeals, hex.EncodeToString(seals))

}
